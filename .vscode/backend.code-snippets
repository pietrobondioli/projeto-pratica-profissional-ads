{
	"Custom Exception": {
		"prefix": "exception",
		"scope": "typescript, javascript",
		"body": [
			"import { ExceptionBase } from '#/be/lib/exceptions/exception.base';",
			"",
			"export class ${1:ExceptionName}Error extends ExceptionBase {",
			"  static readonly message = '${2:Exception message}';",
			"",
			"  public readonly code = '${3:CODE.IN_CAPS}';",
			"",
			"  constructor(cause?: Error, metadata?: unknown) {",
			"    super(${1:ExceptionName}Error.message, cause, metadata);",
			"  }",
			"}"
		],
		"description": "Generate a custom exception class"
	},
	"Domain Event": {
		"prefix": "domainevent",
		"scope": "typescript, javascript",
		"body": [
			"import { DomainEventBase } from '#/be/lib/ddd/domain-event.base';",
			"",
			"type Payload = {",
			"  readonly ${1:Prop1}",
			"};",
			"",
			"export class ${2:EventName}Event extends DomainEventBase<Payload> {",
			" public readonly eventName = '${3:EventNameSlug}';",
			"}"
		],
		"description": "Generate a domain event class"
	},
	"AggregateBase": {
		"prefix": "aggregatebase",
		"scope": "typescript",
		"body": [
			"import { AggregateBase } from '#/be/lib/ddd/aggregate.base';",
			"",
			"export class ${2:AggregateName}Aggregate extends AggregateBase {",
			"  private static _${3:EntityName}Id: string;",
			"",
			"  static entityID(${3:EntityName}Id: string) {",
			"    this._${3:EntityName}Id = ${3:EntityName}Id;",
			"",
			"    return this;",
			"  }",
			"}"
		],
		"description": "Create an aggregate class"
	},
	"DTO": {
		"prefix": "dto",
		"scope": "typescript, javascript",
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",
			"",
			"export class ${1:DtoName}Dto {",
			"  @ApiProperty({",
			"    example: '${3:exampleValue1}',",
			"    description: '${4:description1}',",
			"  })",
			"  readonly ${2:prop1}",
			"}"
		],
		"description": "Generate a DTO class"
	},
	"Command": {
		"prefix": "command",
		"scope": "typescript, javascript",
		"body": [
			"import { Result } from 'neverthrow';",
			"",
			"import { CommandBase } from '#/be/lib/ddd/command.base';",
			"import { ExceptionBase } from '#/be/lib/exceptions/exception.base';",
			"",
			"class Payload {",
			"  readonly ${1:prop1}",
			"}",
			"",
			"export class ${3:CommandName}Command extends CommandBase<",
			"  Payload,",
			"  Result<${4:ReturnType}, ${5:ExceptionBase}>",
			"> {}"
		],
		"description": "Generate a command class"
	},
	"Command Handler": {
		"prefix": "cmdhandler",
		"scope": "typescript, javascript",
		"body": [
			"import { CommandResult } from '@nestjs-architects/typed-cqrs';",
			"import { Inject } from '@nestjs/common';",
			"import { CommandHandler, IInferredCommandHandler } from '@nestjs/cqrs';",
			"import { EventEmitter2 } from '@nestjs/event-emitter';",
			"import { Err, Ok } from 'neverthrow';",
			"import { Repository } from 'typeorm';",
			"",
			"@CommandHandler(${1:CommandName})",
			"export class ${1:CommandName}Handler implements IInferredCommandHandler<${1:CommandName}> {",
			"  constructor(",
			"    @Inject(${2:DI_TOKEN})",
			"    protected readonly ${3:repoName}: ${4:EntityModel},",
			"    protected readonly eventEmitter: EventEmitter2,",
			"  ) {}",
			"",
			"  async execute(",
			"    command: ${1:CommandName},",
			"  ): Promise<CommandResult<${1:CommandName}>> {",
			"    try {",
			"      ${5:AggregateName}.publishEvents(this.eventEmitter);",
			"",
			"      return new Ok('');",
			"    } finally {",
			"      ${5:AggregateName}.clearEvents();",
			"    }",
			"  }",
			"}"
		],
		"description": "Generate a generic command handler service for NestJS CQRS module"
	},
	"HTTP Command Controller": {
		"prefix": "cmdhttpcontroller",
		"scope": "typescript, javascript",
		"body": [
			"import {",
			"  Body,",
			"  ConflictException,",
			"  Controller,",
			"  HttpStatus,",
			"  ${1:MethodImport},",
			"  Res,",
			"} from '@nestjs/common';",
			"import { CommandBus } from '@nestjs/cqrs';",
			"import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';",
			"import { Response } from 'express';",
			"",
			"import { routesV1 } from '#/be/config/routes/app.routes';",
			"import { ApiErrorResponse } from '#/be/lib/api/api-error.response.dto';",
			"",
			"@ApiTags(...routesV1.${2:resourceName}.tags)",
			"@Controller(routesV1.version)",
			"export class ${3:ControllerName}HttpController {",
			"  constructor(private readonly commandBus: CommandBus) {}",
			"",
			"  @${1:MethodImport}(routesV1.${2:resourceName}.commands.${4:endpoint})",
			"  @ApiOperation({ summary: '${5:OperationSummary}' })",
			"  @ApiResponse({",
			"    status: HttpStatus.OK,",
			"  })",
			"  @ApiResponse({",
			"    status: HttpStatus.BAD_REQUEST,",
			"    type: ApiErrorResponse,",
			"  })",
			"  async execute(@Body() body: ${6:RequestDtoName}, @Res() res: Response) {",
			"    const command = new ${7:CommandName}(${8:CommandBody});",
			"",
			"    const result = await this.commandBus.execute(command);",
			"",
			"    return result.match(",
			"      () => res.status(HttpStatus.OK).send(),",
			"      (error) => {",
			"        throw error;",
			"      },",
			"    );",
			"  }",
			"}"
		],
		"description": "Generate a generic HTTP command controller for NestJS CQRS module"
	},
	"Query": {
		"prefix": "query",
		"scope": "typescript",
		"body": [
			"import { Result } from 'neverthrow';",
			"",
			"import { QueryBase } from '#/be/lib/ddd/query.base';",
			"import { ExceptionBase } from '#/be/lib/exceptions/exception.base';",
			"",
			"class Payload {",
			"  readonly ${1:prop1}",
			"}",
			"",
			"export class ${2:QueryName}Query extends QueryBase<",
			"  Payload,",
			"  Result<${4:ReturnType}, ${5:ExceptionBase}>",
			"> {}"
		],
		"description": "Generate a query class"
	},
	"Query Handler": {
		"prefix": "queryhandler",
		"scope": "typescript, javascript",
		"body": [
			"import { QueryResult } from '@nestjs-architects/typed-cqrs';",
			"import { Inject } from '@nestjs/common';",
			"import { IInferredQueryHandler, QueryHandler } from '@nestjs/cqrs';",
			"import { Err, Ok } from 'neverthrow';",
			"import { Repository } from 'typeorm';",
			"",
			"@QueryHandler(${1:QueryName})",
			"export class ${1:QueryName}Handler",
			"  implements IInferredQueryHandler<${1:QueryName}> {",
			"  constructor(",
			"    @Inject(${4:DI_TOKEN})",
			"    private readonly ${2:repoName}: ${3:EntityModel},",
			"  ) {}",
			"",
			"  async execute(",
			"    query: ${1:QueryName},",
			"  ): Promise<QueryResult<${1:QueryName}>> {",
			"    const ${5:entityVariable} = await this.${2:repoName}.findOneBy({",
			"      id: query.payload.id,",
			"    });",
			"",
			"    if (!${5:entityVariable}) {",
			"      return new Err(new ${6:NotFoundError}());",
			"    }",
			"",
			"    return new Ok(${5:entityVariable});",
			"  }",
			"}"
		],
		"description": "Generate a generic query handler service for NestJS CQRS module"
	},
	"Query Controller": {
		"prefix": "querycontroller",
		"scope": "typescript, javascript",
		"body": [
			"import { Controller, Get, HttpStatus, Param } from '@nestjs/common';",
			"import { QueryBus } from '@nestjs/cqrs';",
			"import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';",
			"import { plainToInstance } from 'class-transformer';",
			"",
			"import { routesV1 } from '#/be/config/routes/app.routes';",
			"import { ApiErrorResponse } from '#/be/lib/api/api-error.response.dto';",
			"",
			"@ApiTags(...routesV1.${1:routeName}.tags)",
			"@Controller(routesV1.version)",
			"export class ${2:ControllerName}HttpController {",
			"  constructor(private readonly queryBus: QueryBus) {}",
			"",
			"  @Get(routesV1.${1:routeName}.queries.${3:endpointName})",
			"  @ApiOperation({ summary: '${4:OperationSummary}' })",
			"  @ApiResponse({",
			"    status: HttpStatus.OK,",
			"    type: ${5:ResDtoName},",
			"  })",
			"  @ApiResponse({",
			"    status: HttpStatus.BAD_REQUEST,",
			"    type: ApiErrorResponse,",
			"  })",
			"  async execute(@Param('id') id: string) {",
			"    const query = new ${3:QueryName}({",
			"      id,",
			"    });",
			"",
			"    const result = await this.queryBus.execute(query);",
			"",
			"    return result.match(",
			"      (${6:entity}) => ",
			"         plainToInstance(${5:ResDtoName}, ${6:entity}, {",
			"           excludeExtraneousValues: true,",
			"         }),",
			"      (error) => {",
			"        throw error;",
			"      },",
			"    );",
			"  }",
			"}"
		],
		"description": "Generate a generic query controller for NestJS CQRS module"
	},
	"Paginated Query": {
		"prefix": "paginatedquery",
		"scope": "typescript, javascript",
		"body": [
			"import { Result } from 'neverthrow';",
			"",
			"import {",
			"  PaginatedQueryBase,",
			"  PaginatedQueryPayloadBase,",
			"  PaginatedQueryResultBase,",
			"} from '#/be/lib/ddd/query.base';",
			"import { ExceptionBase } from '#/be/lib/exceptions/exception.base';",
			"",
			"class Payload extends PaginatedQueryPayloadBase {",
			"  readonly ${1:optionalParameter}",
			"}",
			"",
			"export class ${2:QueryName}Query extends PaginatedQueryBase<",
			"  Payload,",
			"  Result<PaginatedQueryResultBase<${3:Entity}>, ${4:ExceptionBase}>",
			"> {}"
		],
		"description": "Generate a generic paginated query for NestJS CQRS module"
	},
	"Paginated Query Req DTO": {
		"prefix": "paginatedQueryReqDto",
		"body": [
			"import { ApiProperty } from '@nestjs/swagger';",
			"import { IsOptional, IsString } from 'class-validator';",
			"import { PaginatedQueryRequestDto } from '#/be/lib/api/paginated-query.request.dto';",
			"",
			"export class ${1:DtoName}ReqDto extends PaginatedQueryRequestDto {",
			"  @IsOptional()",
			"  @IsString()",
			"  @ApiProperty({",
			"    example: '${2:Prop1 Example}',",
			"    description: '${3:Prop1 Description}',",
			"  })",
			"  readonly ${4:prop1}",
			"}"
		],
		"description": "Paginated Query Req DTO"
	},
	"Paginated Query Response DTO": {
		"prefix": "paginatedQueryResDto",
		"body": [
			"import { PaginatedResponseDto } from '#/be/lib/api/paginated.response.base';",
			"import { ResponseBase } from '#/be/lib/api/response.dto.base';",
			"",
			"class ${1:ItemDto} extends ResponseBase {",
			"  ${2:// Add properties and methods here}",
			"}",
			"",
			"export class ${3:DtoName}ResDto extends PaginatedResponseDto<${1:ItemDto}> {}"
		],
		"description": "Paginated Response DTO with base and list DTO classes"
	},
	"Paginated Query Handler": {
		"prefix": "paginatedqueryhandler",
		"scope": "typescript, javascript",
		"body": [
			"import { Inject } from '@nestjs/common';",
			"import { IInferredQueryHandler, QueryHandler } from '@nestjs/cqrs';",
			"import { QueryResult } from '@nestjs-architects/typed-cqrs';",
			"import { Ok } from 'neverthrow';",
			"import { Like, Repository } from 'typeorm';",
			"",
			"@QueryHandler(${1:QueryName})",
			"export class ${1:QueryName}Handler",
			"  implements IInferredQueryHandler<${1:QueryName}>",
			"{",
			"  constructor(",
			"    @Inject(${4:DI_TOKEN})",
			"    protected readonly ${2:repoName}: ${3:EntityModel},",
			"  ) {}",
			"",
			"  async execute(",
			"    query: ${1:QueryName},",
			"  ): Promise<QueryResult<${1:QueryName}>> {",
			"    const { ${5:searchField}, page, limit, order } = query.payload;",
			"",
			"    const items = await this.${2:repoName}Repo.find({",
			"      where: {",
			"        ${5:searchField}: Like(`%${5:searchField}%`),",
			"      },",
			"      skip: (page - 1) * limit,",
			"      take: limit,",
			"      order: {",
			"        [order.field === true ? 'createdAt' : order.field]: order.param,",
			"      },",
			"    });",
			"",
			"    return new Ok({",
			"      items: items,",
			"      page,",
			"      limit,",
			"      total: items.length,",
			"    });",
			"  }",
			"}"
		],
		"description": "Generate a generic paginated query handler for NestJS CQRS module"
	},
	"Paginated Query Controller": {
		"prefix": "paginatedqueryctrl",
		"scope": "typescript, javascript",
		"body": [
			"import { Controller, Get, HttpStatus, Query } from '@nestjs/common';",
			"import { QueryBus } from '@nestjs/cqrs';",
			"import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';",
			"import { plainToInstance } from 'class-transformer';",
			"",
			"import { routesV1 } from '#/be/config/routes/app.routes';",
			"import { ApiErrorResponse } from '#/be/lib/api/api-error.response.dto';",
			"",
			"@ApiTags(...routesV1.${1:resource}.tags)",
			"@Controller(routesV1.version)",
			"export class ${2:ControllerName} {",
			"  constructor(private readonly queryBus: QueryBus<${3:QueryName}>) {}",
			"",
			"  @Get(routesV1.${1:resource}.queries.${4:endpointName})",
			"  @ApiOperation({ summary: '${5:SummaryDescription}' })",
			"  @ApiResponse({",
			"    status: HttpStatus.OK,",
			"    type: ${6:ResponseDtoName},",
			"  })",
			"  @ApiResponse({",
			"    status: HttpStatus.BAD_REQUEST,",
			"    type: ApiErrorResponse,",
			"  })",
			"  async execute(@Query() qry: ${7:RequestDtoName}) {",
			"    const query = new ${3:QueryName}(qry);",
			"",
			"    const result = await this.queryBus.execute(query);",
			"",
			"    return result.match(",
			"      (${8:entity}) =>",
			"        plainToInstance(${6:ResponseDtoName}, ${8:entity}, {",
			"          excludeExtraneousValues: true,",
			"        }),",
			"      (error) => {",
			"        throw error;",
			"      },",
			"    );",
			"  }",
			"}"
		],
		"description": "Generate a generic paginated query controller for NestJS CQRS module"
	}
}
